name: CD - Deploy Backend Services to AKS (Reusable)

on:
  workflow_call:
    inputs:
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string

jobs:
  deploy_backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ inputs.aks_resource_group }}" \
            --name "${{ inputs.aks_cluster_name }}" \
            --overwrite-existing
          kubectl cluster-info

      - name: Deploy Backend Infrastructure (ConfigMaps, Secrets, Databases)
        run: |
          cd k8s
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f customer-db.yaml

      - name: Add Storage keys to ecommerce-secret
        shell: bash
        run: |
          set -e
          NS=default
          SA_NAME='${{ secrets.STORAGE_ACCOUNT_NAME }}'
          if [ -z "$SA_NAME" ]; then
              echo "STORAGE_ACCOUNT_NAME secret is not set." >&2
              exit 1
          fi

          # Get a storage key from the RG that hosts your staging resources
          SA_KEY=$(az storage account keys list \
              -g "${{ inputs.aks_resource_group }}" \
              -n "$SA_NAME" \
              --query "[0].value" -o tsv)

          if [ -z "$SA_KEY" ]; then
              echo "Failed to retrieve key for storage account '$SA_NAME'." >&2
              exit 1
          fi

          # Ensure the core secret exists (created by secrets.yaml), then merge in storage keys
          kubectl -n "$NS" patch secret ecommerce-secret \
              --type merge \
              -p "{\"stringData\":{
                  \"AZURE_STORAGE_ACCOUNT_NAME\":\"$SA_NAME\",
                  \"AZURE_STORAGE_ACCOUNT_KEY\":\"$SA_KEY\"
                  }}"

      - name: Deploy Backend Microservices (Product, Order, Customer)
        run: |
          cd k8s
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
          kubectl apply -f customer-service.yaml

      - name: Wait for backend deployments to be ready
        run: |
          kubectl rollout status deploy/product-service --timeout=5m
          kubectl rollout status deploy/order-service   --timeout=5m
          kubectl rollout status deploy/customer-service --timeout=5m
